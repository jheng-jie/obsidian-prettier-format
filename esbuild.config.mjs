import esbuild from "esbuild"
import process from "process"
import builtins from "builtin-modules"
import fs from "fs"
import path from "path"
import { lessLoader } from "esbuild-plugin-less"

const prod = process.argv[2] === "production"
const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`

/**
 * @desc build
 */
const RunBuild = async function () {
  const dist = path.resolve("./dist")
  const exist = await fs.promises
    .access(dist, fs.constants.F_OK)
    .then(() => true)
    .catch(() => false)

  // clear
  if (exist) await fs.promises.rm("./dist", { recursive: true })

  // es build
  await esbuild
    .build({
      banner: {
        js: banner,
      },
      entryPoints: ["src/main.ts", "src/styles.less"],
      bundle: true,
      plugins: [lessLoader({ filename: "styles.less" }, { filter: /\.less$/ })],
      external: [
        "obsidian",
        "electron",
        "@codemirror/autocomplete",
        "@codemirror/closebrackets",
        "@codemirror/collab",
        "@codemirror/commands",
        "@codemirror/comment",
        "@codemirror/fold",
        "@codemirror/gutter",
        "@codemirror/highlight",
        "@codemirror/history",
        "@codemirror/language",
        "@codemirror/lint",
        "@codemirror/matchbrackets",
        "@codemirror/panel",
        "@codemirror/rangeset",
        "@codemirror/rectangular-selection",
        "@codemirror/search",
        "@codemirror/state",
        "@codemirror/stream-parser",
        "@codemirror/text",
        "@codemirror/tooltip",
        "@codemirror/view",
        ...builtins,
      ],
      format: "cjs",
      watch: !prod,
      target: "es2016",
      logLevel: "info",
      sourcemap: prod ? false : "inline",
      treeShaking: true,
      outdir: "dist",
    })
    .catch(() => process.exit(1))

  // copy manifest
  await fs.promises.copyFile("./manifest.json", "./dist/manifest.json")
}

RunBuild().catch(console.error)
